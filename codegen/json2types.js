/*
 * The goal of this script is to convert the .json files distributed within the
 * .zip archives provided by the OCPP Alliance into TypeScript declarations
 * based on the original JSON Schema objects.
 * 
 * This script uses json-schema-to-typescript package:
 * https://www.npmjs.com/package/json-schema-to-typescript
 */
import { join, resolve } from 'node:path';
import { readdir, readFile, writeFile } from 'node:fs/promises';
import { compile } from 'json-schema-to-typescript';
import { deduplicate_blocks } from './json2types-blocks.js';

const input_dir_path = process.argv[2];
const input_dir_abspath = resolve(process.cwd(), input_dir_path);

const output_file_path = process.argv[3];
const output_file_abspath = resolve(process.cwd(), output_file_path);

const mode = process.argv[4];
if (mode !== 'OCPP16' && mode !== 'OCPP20' && mode !== 'OCPP21') {
  throw new Error('Mode param must be one of "OCPP16", "OCPP20" and "OCPP21"');
}

const output_file_header = `/*
 *
 * THIS FILE IS AUTOMATICALLY GENERATED AND SHOULD NEVER BE EDITED DIRECTLY.
 * SEE ../../BUILD.md
 *
 * GENERATED ON: ${new Date().toISOString()}
 *
 */\n\n\n`;

(async () => {

  const file_names = await readdir(input_dir_abspath);

  let output_file_data = output_file_header;

  for (const file_name of file_names) {

    if (!file_name.endsWith('.json')) {
      continue;
    }

    let schema_name = file_name.slice(0, -5);
    if (!schema_name.match(/(?:Request|Response)$/)) {
      // The names of schema files for CALL messages within the OCPP 1.6 spec
      // archive do not have the `Request` suffix.
      schema_name += 'Request';
    }

    const input_file_abspath = join(input_dir_abspath, file_name);
    const input_file_data = await readFile(input_file_abspath, 'utf8');

    const input_schema = JSON.parse(input_file_data);
    
    if ((mode === 'OCPP20' || mode === 'OCPP21') && input_schema.$id.indexOf(':') > -1) {
      // The schema files within the OCPP 2.0.1 spec have namespaced $id
      // attributes such as `urn:OCPP:Cp:2:2020:3:CancelReservationRequest`.
      // Here we get rid of the "urn" part of the $id so that json2ts will
      // name the type correctly.
      input_schema.$id = input_schema.$id.split(':').slice(-1)[0];
    }
    
    const compiled_type = await compile(input_schema, undefined, {
      ignoreMinAndMaxItems: true,
    });

    output_file_data += compiled_type;
      
  }

  // Remove comments
  output_file_data = output_file_data.replaceAll(/^\s*?\/\*\*(?:.|\n)*?\*\/\n/mg, '');
  output_file_data = output_file_data.replaceAll('/* eslint-disable */', '');

  // Deduplicate code blocks
  deduplicate_blocks[mode].forEach((block) => {
    if (output_file_data === (output_file_data = output_file_data.replaceAll(block, ''))) {
      throw new Error(`\n\nFailed to deduplicate block:\n\n${block}\n\n`);
    }
    output_file_data += '\n\n' + block;
  });

  await writeFile(output_file_abspath, output_file_data, 'utf8');
  
})().catch((err) => {
  console.error(err.stack);
  process.exit(1);
});
